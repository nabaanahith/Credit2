{"version":3,"sources":["screens/MainScreen/components/form/index.js","screens/MainScreen/components/card/index.js","screens/MainScreen/index.js","App.js","index.js"],"names":["CForm","props","updateMainState","name","value","onUpdateStateValue","handleFormChange","event","target","setState","replaceMissingChars","cardNumber","cardNumberTmp","split","cardNumberArr","maskedCardNumber","forEach","val","index","push","join","onCardNumberChange","replace","test","trimRight","onCvvFocus","onCvvBlur","onQiClick","onCriditClick","currentYear","Date","getFullYear","state","fields","email","message","errors","disabled","showMyComponentcridit","showMyComponent","message2","isallvalid","isqivalidcardnumber","isqivalidcvvnumber","iscriditcardnumber","iscriditcvvnumber","iscriditname","isqivalidyear","cardCvv","cardNumbererr2","cardNumber2","cardNumbererr","cardnameerr","datevalitity","cardCvverrqi","cardCvverr","cardMonth","cardHolder","cardYear","monthsArr","Array","from","x","i","month","yearsArr","checkvalid","bind","checkCardNumber","checkCardName","chaeckcvvqi","checkCardNumber2","chaeckcvv","handlePrint","this","alert","today","currentmonth","parseInt","getMonth","formIsValid","length","match","field","e","preventDefault","handleValidation","console","log","window","location","reload","trim","parse","setCustomValidity","cardNumberRef","current","selectionStart","prevProps","prevState","cursorIdx","node","cardNum","prevCardNum","selectionEnd","cardHolderRef","cardDateRef","cardCvvRef","onCardInputFocus","onCardInputBlur","className","onSubmit","handleSubmit","method","id","children","type","for","src","alt","style","display","htmlFor","onMouseUp","onMouseLeave","autoComplete","onChange","onInput","handleChange","maxLength","ref","onFocus","onBlur","color","fontWeight","onMouseDown","map","key","required","class","onClick","Component","CARDS","visa","mastercard","imarcan","qi","diners","Card","cardType","re","number","Object","entries","card","pattern","RegExp","cardBackgroundName","random","Math","floor","removeEmptySpaces","shouldMaskNumber","outlineElementStyle","element","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","backgroundImgname","counter","currentFocusedElm","isCardFlipped","onCardElementClick","cardHolderArr","maskCardNumber","process","TransitionGroup","component","CSSTransition","classNames","timeout","SwitchTransition","in-out","out-in","toString","substr","MainScreen","initialState","useState","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","focus","cardElementsRef","_event","inputName","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9cb618f8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ok } from 'assert';\nimport { SSL_OP_PKCS1_CHECK_1 } from 'constants';\n\n// function validation(values) {\n//     const errors = {};\n//     const emailPattern = /(.+)@(.+){2,}\\.(.+){2,}/;\n//     if (!emailPattern.test(values.email)) {\n//       errors.email = 'Enter a valid email';\n//     }\n  \n//     return errors;\n//   }\nclass CForm extends Component {\n    constructor(props) {\n        super(props);\n        const currentYear = new Date().getFullYear();\n\n        this.state = {\n            \n            fields: {\n                \n                name:'',\n                email: '',\n                message: ''\n              },\n              errors: {},\n              disabled : false,\n        showMyComponentcridit:true,\n          showMyComponent:false,\n            cardNumber: '',\n            message2: '',\n            isallvalid:true,\n            isqivalidcardnumber:false,\n            isqivalidcvvnumber:false,\n            iscriditcardnumber:false,\n            iscriditcvvnumber:false,\n            iscriditname:false,\n            isqivalidyear:false,\n            cardCvv:'',\n            cardNumbererr2:'',\n            cardNumber2:'',\n            cardNumbererr:'',\n            cardnameerr:'',\n            datevalitity:'',\n            cardCvverrqi:'',\n            cardCvverr:'',\n            cardMonth: '',\n            cardHolder:'',\n            cardYear: '',\n\n\n            monthsArr: Array.from(new Array(12), (x, i) => {\n\n                const month = i + 1;\n                return month <= 9 ? ''+ month : month;\n            }),\n            yearsArr: Array.from(new Array(9), (x, i) => currentYear + i)\n        };\n        this.checkvalid = this.checkvalid.bind(this);\n        this.checkCardNumber = this.checkCardNumber.bind(this);\n        this.checkCardName = this.checkCardName.bind(this);\n        \n        this.chaeckcvvqi = this.chaeckcvvqi.bind(this);\n\n        this.checkCardNumber2 = this.checkCardNumber2.bind(this);\n\n        this.chaeckcvv = this.chaeckcvv.bind(this);\n\n        this.handlePrint = this.handlePrint.bind(this);\n    }\n    checkvalid(){\n        let okay=false;\n    //     var str = \" a b    c d e   f g   \";\n    //     var newStr = str.replace(/\\s+/g, '');\n    //  alert(newStr) \n    // alert(this.state.cardMonth+\"   \"+this.state.cardYear)\n        //  alert(this.state.cardNumber.replace(/\\s+/g, '')+\" ffrf \"+this.state.cardCvv.replace(/\\s+/g, ''))\nif(\n    (this.state.cardNumber.replace(/\\s+/g, '')=='4111 1111 1111 1111'.replace(/\\s+/g, '')\n&&this.state.cardCvv.replace(/\\s+/g, '')=='247'.replace(/\\s+/g, '')&&\nthis.state.cardMonth.replace(/\\s+/g, '')=='12'.replace(/\\s+/g, '')&&\nthis.state.cardYear.replace(/\\s+/g, '')=='2020'.replace(/\\s+/g, '')) ||\n\n(this.state.cardNumber.replace(/\\s+/g, '')=='5500 0000 0000 0004'.replace(/\\s+/g, '')\n&&this.state.cardCvv.replace(/\\s+/g, '')=='895'.replace(/\\s+/g, '')&&\nthis.state.cardMonth.replace(/\\s+/g, '')=='11'.replace(/\\s+/g, '')&&\nthis.state.cardYear.replace(/\\s+/g, '')=='2023'.replace(/\\s+/g, '')) ||\n\n(this.state.cardNumber.replace(/\\s+/g, '')=='3400 0000 0000 009'.replace(/\\s+/g, '')\n&&this.state.cardCvv.replace(/\\s+/g, '')=='452'.replace(/\\s+/g, '')&&\nthis.state.cardMonth.replace(/\\s+/g, '')=='3'.replace(/\\s+/g, '')&&\nthis.state.cardYear.replace(/\\s+/g, '')=='2021'.replace(/\\s+/g, ''))||\n\n\n\n(this.state.cardNumber.replace(/\\s+/g, '')=='3000 0000 0000 04'.replace(/\\s+/g, '')\n&&this.state.cardCvv.replace(/\\s+/g, '')=='754'.replace(/\\s+/g, '')&&\nthis.state.cardMonth.replace(/\\s+/g, '')=='7'.replace(/\\s+/g, '')&&\nthis.state.cardYear.replace(/\\s+/g, '')=='2022'.replace(/\\s+/g, '')) \n||\n\n\n(this.state.cardNumber.replace(/\\s+/g, '')=='6331 2398 9808 1290'.replace(/\\s+/g, '')\n&&this.state.cardCvv.replace(/\\s+/g, '')=='1234'.replace(/\\s+/g, '')&&this.state.isallvalid)){\n  okay=true;\n\n    \n\n}else{\n    okay=false;\n    // alert('تاكد من البيانات المدخله ')\n \n\n}\n\n\n// if(this.state.isallvalid){\n//     alert(\"all done\")\nif(okay){\n    if(\n        (this.state.isqivalidcardnumber&&this.state.isqivalidcvvnumber)||\n       \n       (this.state.iscriditcardnumber&&this.state.iscriditcvvnumber&&this.state.iscriditname&&this.state.datevalitity)){\n        alert('تمت عملية الدفع بنجاح ')\n       }\n        \n           else{\n               alert('تاكد من البيانات المدخله ')\n           \n           \n           \n         }\n}else{\n    alert('لم يتم تسجيلك في قاعه البيانات')\n\n}\n\n// }\n// else{\n//     alert(\"no done\")\n    // alert(this.state.isqivalid)\n\n}\n\n\n    \n    handlePrint(){\n   \n       \n\nvar today = new Date();\nconst currentYear = new Date().getFullYear();\nconst currentmonth=parseInt(today.getMonth()+1);\nif(currentYear==this.state.cardYear){\n    if(currentmonth>=this.state.cardMonth){\n        this.setState({datevalitity: false});\n        this.setState({message2: \" تاريخ انتهاء البطاقة قديم\"});\n    }\n\n\nif(currentmonth<this.state.cardMonth){\nthis.setState({datevalitity: true});\n\nthis.setState({message2: \" ok\"});\n\n\n\n}\n\n}\nelse if(currentYear<this.state.cardYear){\n    this.setState({datevalitity: true});\n\n    this.setState({message2: \" ok\"});\n    \n\n}\nelse if(currentYear>this.state.cardYear){\n    \n    this.setState({datevalitity: false});\n    this.setState({message2: \"تاريخ انتهاء البطاقة  قديم\"});\n   \n\n}\n    \n    }\n\n    handleValidation(){\n     \n        let fields = this.state.fields;\n        let errors = {};\n        let formIsValid = true;\n //qi validation\n        if(!fields[\"name\"]){\n           formIsValid = false;\n        //    this.setState({isallvalid: false});\n           errors[\"name\"] = \"Name field cannot be empty\";\n        }\n \n        if(typeof fields[\"name\"] !== \"undefined\" && !fields[\"name\"] === false){\n        //    if(!fields[\"name\"].match(/077[0-9]{8}/)){\n            if((fields[\"name\"].length)>15){\n              formIsValid = false;\n            //   this.setState({isallvalid: false});\n              errors[\"name\"] = \"رجاءا ادخلرقما صحيحا متكون من 15 رقم  \";\n           }\n\n\n           if(!fields[\"name\"].match(/633[1-5]/)){\n            formIsValid = false;\n            // this.setState({isallvalid: false});\n            errors[\"name\"] = \"رجاءا ادخلرقما صحيحا متكون من 5 رقم  \";\n         }\n\n\n         if(!fields[\"name\"].match(/633[1-5]/) && (fields[\"name\"].length)>15){\n            formIsValid = false;\n            // this.setState({isallvalid: false});\n            errors[\"name\"] = \" او 5 رجاءا ادخلرقما صحيحا متكون من 15 رقم  \";\n         }\n\n\n\n\n        }\n \n        if(!fields[\"email\"]){\n           formIsValid = false;\n        //    this.setState({isallvalid: false});\n\n           errors[\"email\"] = \"Email field cannot be empty\";\n        }\n \n        if(typeof fields[\"email\"] !== \"undefined\" && !fields[\"email\"] === false){\n            if(!fields[\"email\"].match(/4[1-5]/) && (fields[\"email\"].length)>15){\n                formIsValid = false;\n                // this.setState({isallvalid: false});\n                errors[\"email\"] = \" او4 رجاءا ادخلرقما صحيحا متكون من 15 رقم  \";\n             } \n             if(!fields[\"email\"].match(/4[1-5]/)){\n                formIsValid = false;\n                // this.setState({isallvalid: false});\n                errors[\"email\"] = \" او4 رجاءا ادخلرقما صحيحا متكون من 4 رقم  \";\n             } \n             if((fields[\"email\"].length)>15){\n                formIsValid = false;\n                // this.setState({isallvalid: false});\n                errors[\"email\"] = \" او4 رجاءا ادخلرقما صحيحا متكون من 15 رقم  \";\n             } \n       }\n    \n       new Date().getFullYear()\n\n\n\n\n\n\n \n       this.setState({errors: errors});\n       return formIsValid;\n   }\n \n   handleChange(field, e){\n       let fields = this.state.fields;\n       fields[field] = e.target.value;\n       this.setState({fields});\n   }\n \n   handleSubmit(e){\n \n\n\n\n       e.preventDefault();\n       if(this.handleValidation()){\n           console.log('validation successful')\n         }else{\n           console.log('validation failed')\n         }\n   }\n   reloadPage () {\n    window.location.reload()\n  }\n    updateMainState = (name, value) => {\n        this.props.onUpdateStateValue({\n            name,\n            value\n        });\n    };\n    chaeckcvvqi(){\n        if(this.state.cardCvv.trim().length!=0){\n            this.setState({isqivalidcvvnumber: true});\n\n            this.setState({cardCvverrqi: \"cardCvverrqieeلا\"});\n        \n                 \n            }else{\n                this.setState({isqivalidcvvnumber: false});\n\n                    this.setState({cardCvverrqi: \"يرجى ادخال الرقم صحيح\"});\n                }\n    }\n    chaeckcvv(){\n        if(this.state.cardCvv.trim().length!=0){\n            this.setState({iscriditcvvnumber: true});\n\n            this.setState({cardCvverr: \"eeلا\"});\n        \n                 \n            }else{\n                this.setState({iscriditcvvnumber: false});\n\n                    this.setState({cardCvverr: \"يرجع ادخال الرقم صحيح\"});\n                }\n        \n    }\n    checkCardName(){\n        \nif(this.state.cardHolder.trim().length!=0){\n \n    this.setState({iscriditname: true});\n\n    this.setState({cardnameerr: \"eeلا\"});\n\n         \n    }else{\n        this.setState({iscriditname: false});\n\n            this.setState({cardnameerr: \"يرجى ادخال اسم حامل البطاقة\"});\n        }\n\n    }\n    checkCardNumber2(){\n        if(this.state.cardNumber.trim().length!=0){\n        \n            if(!this.state.cardNumber.match(/633[1-5]/) && (this.state.cardNumber.length)>19){\n               \n                this.setState({isqivalidcardnumber: false});\n                this.setState({cardNumbererr2: \" يرجى ادخال رقم البطاقة صحيح\"})  \n        \n            }\n        \n                // if((this.state.cardNumber.length)>19){\n            \n                //     this.setState({isqivalidcardnumber: false});\n                //     this.setState({cardNumbererr2: \"رجاءا لايمكن ان يتجاوز عدد الارقام 16 رقما\"});\n                // }\n        \n                    if(!this.state.cardNumber.match(/633[1-5]/)){\n                        this.setState({isqivalidcardnumber: false});\n                        this.setState({cardNumbererr2: \"   Qicard يرجى ادخال رقم البطاقة صحيح في هذا الحقل فقط\"})  \n\n                        // this.setState({cardNumbererr2: \"يجب ان يبدا الرقم ب 633 \"});\n        \n                    }\n                    if((this.state.cardNumber.match(/633[1-5]/)&&(this.state.cardNumber.length)<20)){\n                        this.setState({isqivalidcardnumber: true});\n                        this.setState({cardNumbererr2: \"اوكي\"});\n        \n                    }\n                }else{\n                    this.setState({isqivalidcardnumber: false});\n                    this.setState({cardNumbererr2: \" يرجى ادخال رقم البطاقة صحيح\"})  \n\n                    // this.setState({cardNumbererr2: \"رجاءا ادخل رقما\"});\n                }\n            }\ncheckCardNumber(){\n\nif(this.state.cardNumber.trim().length!=0){\n\n    if(!this.state.cardNumber.match(/5[1-5]/)&&!this.state.cardNumber.match(/4/) &&!this.state.cardNumber.match(/34/)&&(this.state.cardNumber.length)>19){\n       \n        this.setState({iscriditcardnumber: false});\n        // this.setState({cardNumbererr: \"يجب ان يبدا الرقم ب 5 او 4 ويجب ان يكون عدده لايتجاوز ال 16 رقم \"});}   \n        this.setState({cardNumbererr:'يرجى ادخال رقم البطاقة صحيح'});}   \n\n\n\n        if((this.state.cardNumber.length)>19){\n    \n            this.setState({iscriditcardnumber: false});\n        //   this.setState({cardNumbererr:'يرجى ادخال رقم البطاقة صحيح'});\n        this.setState({cardNumbererr:'يرجى ادخال رقم البطاقة صحيح'})\n        }\n\n            if(!this.state.cardNumber.match(/5[1-5]/)&&!this.state.cardNumber.match(/4/)&&!this.state.cardNumber.match(/34/)&&!this.state.cardNumber.match(/633[1-5]/)){\n                this.setState({iscriditcardnumber: false});\n                // this.setState({cardNumbererr: \"جب ان يبدا الرقم ب 5 او 4ا\"});\n                this.setState({cardNumbererr:'يرجى ادخال رقم البطاقة صحيح'})\n\n            }\n\n            if(this.state.cardNumber.match(/633[1-5]/)){\n                this.setState({iscriditcardnumber: false});\n                // this.setState({cardNumbererr: \" هذه بطاقه qicard رجاءا ادخلها في الاسفل\"}\n                \n                this.setState({cardNumbererr:   'Qicard'+'يرجى ادخال رقم البطاقة في حقل '}\n                \n                );\n\n            }\n\n\n\n\n            if((this.state.cardNumber.match(/5[1-5]/)||this.state.cardNumber.match(/4/))&&(this.state.cardNumber.length)<20){\n                this.setState({iscriditcardnumber: true});\n                this.setState({cardNumbererr: \"لا 3 ول\"});\n\n            }\n        }else{\n            this.setState({iscriditcardnumber: false});\n            this.setState({cardNumbererr: \" يرجى ادخال رقم البطاقة صحيح\"})  \n\n            // this.setState({cardNumbererr: \"رجاءا ادخل رقما\"});\n        }\n\n//    if(this.state.cardNumber==\"1234\"){\n//     this.setState({cardNumbererr: \"ffffلتاريخ قديم\"});}\n\n    // alert(\"\"+this.state.cardNumber)\n}\n    handleFormChange = event => {\n        const { name, value } = event.target;\n\n        this.setState({ [name]: value });\n        this.updateMainState(name, value);\n    };\n\n    replaceMissingChars = cardNumber => {\n        let cardNumberTmp = '#### #### #### ####';\n        cardNumberTmp = cardNumberTmp.split('');\n        let cardNumberArr = cardNumber.split('');\n\n        let maskedCardNumber = [];\n        cardNumberTmp.forEach((val, index) => {\n            cardNumberArr[index]\n                ? maskedCardNumber.push(cardNumberArr[index])\n                : maskedCardNumber.push(val);\n        });\n\n        return maskedCardNumber.join('');\n    };\n    onChange(e) {\n        let date = new Date(Date.parse(e.target.value));\n        \n        if (0 > 0) {\n          e.target.setCustomValidity(\"Please select a date in the past.\"); \n        } else {\n          e.target.setCustomValidity(\"uuu\");\n        }\n      }\n    onCardNumberChange = event => {\n        let { value, name } = event.target;\n        let cardNumber = value;\n        value = value.replace(/\\D/g, '');\n        if (/^3[47]\\d{0,13}$/.test(value)) {\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^3(?:0[0-5]|[68]\\d)\\d{0,11}$/.test(value)) {\n            // diner's club, 14 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^\\d{0,16}$/.test(value)) {\n            // regular cc number, 16 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{4})/, '$1 $2 ')\n                .replace(/(\\d{4}) (\\d{4}) (\\d{4})/, '$1 $2 $3 ');\n        }\n\n        this.setState({ [name]: cardNumber.trimRight() });\n        this.updateMainState(name, cardNumber);\n    };\n\n    onCvvFocus = event => {\n        this.updateMainState('isCardFlipped', true);\n    };\n\n    onCvvBlur = event => {\n        this.updateMainState('isCardFlipped', false);\n    };\n   onQiClick = event => {\n        this.updateMainState('showMyComponent', true);\n    };\n    onCriditClick = event => {\n        this.updateMainState('showMyComponentcridit', true);\n    };\n\n    getSnapshotBeforeUpdate() {\n      return this.props.cardNumberRef.current.selectionStart;\n    }\n\n    componentDidUpdate(prevProps, prevState, cursorIdx) {\n      const node = this.props.cardNumberRef.current;\n      const { cardNumber: cardNum } = this.state;\n      const { cardNumber: prevCardNum } = prevState;\n      if (\n        cardNum.length > prevCardNum.length &&\n        cardNum[cursorIdx - 1] === \" \"\n      ) {\n        cursorIdx += 1;\n      } else if (prevCardNum[cursorIdx - 1] === \" \") {\n        cursorIdx -= 1;\n      }\n      node.selectionStart = node.selectionEnd = cursorIdx;\n    }\n \n    render() {\n\n        const { cardMonth, cardYear, monthsArr, yearsArr } = this.state;\n        const {\n            cardNumberRef,\n            cardHolderRef,\n            cardDateRef,\n            cardCvvRef,\n            onCardInputFocus,\n            onCardInputBlur\n        } = this.props;\n        return (\n\n\n\n\n            <form className=\"card-form\" onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n                \n           \n            <div className=\"card-form\">\n        \n                <div id=\"cars\"className=\"card-list\">{this.props.children}</div>\n                <div className=\"card-form__inner\" id=\"card-form__inner\">\n                <h3>\n                QiPay gateway \n            </h3>\n                <h6>\n                All transactions are secure and encrypted\n            </h6>\n<div className=\"card-header\">\n\n\n<input type=\"radio\" id=\"inputy\"  type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value=\"option1\" \nonClick={()=>{\n               this.setState({isallvalid: false});\n\n    this.setState({ showMyComponent: true });\n    this.updateMainState('showMyComponent', true);\n    this.setState({ showMyComponentcridit: false });\n    this.updateMainState('showMyComponent', true);\n    this.updateMainState('showMyComponentcridit', false);\n    this.setState({ cardNumber: '' });\n\n}}\n   \n                                   /> \n                                     <label className=\"form-check-label\" for=\"exampleRadios1\">CriditCard</label>\n\n        <text>\n                                   {/* CriditCart */}\n                                   </text>\n\n                          <div className=\"imgs\">\n                          <img className=\"u2\"\nsrc={process.env.PUBLIC_URL + '/yuyu.png'}\n                                      alt=\"\"\n                                   /> \n<img className=\"u2\"\n                                   src={process.env.PUBLIC_URL + '/visa.png'}\n                                      alt=\"\"\n                                   /> \n\n{/* <img className=\"u2\"\n                                   src={process.env.PUBLIC_URL + '/amex.png'}\n                                      alt=\"\"\n                                   /> */}\n                              </div>         \n\n                           \n\n  \n  </div>\n \n  <div   id=\"all\" style={this.state.showMyComponent ? {} : { display: 'none' }} >\n\n                    <div className=\"card-input\">\n                        <label\n                            htmlFor=\"cardNumber\"\n                            className=\"card-input__label\"\n                        >\n                            Card Number\n                        </label>\n                       \n\n        \n                  \n                        <input\n                 id=\"cardnumber\"\n                 onMouseUp={this.checkCardNumber}\n                 onMouseLeave={this.checkCardNumber}\n\n                            type=\"tel\"\n                            name=\"cardNumber\"\n                            className=\"card-input__input\"\n                            autoComplete=\"off\"\n                            onChange={this.onCardNumberChange\n                              \n                            }\n                        onInput={this.handleChange.bind(this, \"cardNumber\")}\n                            \n                            maxLength=\"19\"\n                            ref={cardNumberRef}\n                            \n                            onFocus={e => onCardInputFocus(e, 'cardNumber')}\n                            onBlur={onCardInputBlur}\n                            value={this.state.cardNumber}\n                        />\n                       {                            \n}\n                        {!this.state.iscriditcardnumber ?  \n                        <span style={{color: \"red\" , fontWeight: \"bold\"}}>{this.state.cardNumbererr}</span> \n                        : ''}\n                           \n                   </div>\n\n                    <div className=\"card-input\">\n                        <label htmlFor=\"cardName\" className=\"card-input__label\">\n                           Name on card\n                        </label>\n                        <input\n                        onMouseUp={this.checkCardName}\n                        onMouseDown={this.checkCardName}\n                        onMouseLeave={this.checkCardName}\n                        id=\"cardname\"\n                        type=\"text\"\n                        className=\"card-input__input\"\n                        autoComplete=\"off\"\n                        name=\"cardHolder\"\n                        onChange={this.handleFormChange}\n                        ref={cardHolderRef}\n                        onFocus={e => onCardInputFocus(e, 'cardHolder')}\n                        onBlur={onCardInputBlur}\n                            \n                                \n                            \n            \n                        />\n                           {!this.state.iscriditname ?  \n                        <span style={{color: \"red\" , fontWeight: \"bold\"}}>{this.state.cardnameerr}</span> \n                        : ''}\n                                                       \n\n                    </div>\n\n                    <div className=\"card-form__row\">\n                        <div className=\"card-form__col\">\n                            <div className=\"card-form__group\">\n                                <label\n                                    htmlFor=\"cardMonth\"\n                                    className=\"card-input__label\"\n                                >\n                                    Expiration Date\n                                </label>\n                                <select\n                                    className=\"card-input__input -select\"\n                                    value={cardMonth}\n                                    name=\"cardMonth\"\n                                    onChange={this.handleFormChange}\n                                    ref={cardDateRef}\n                                    onMouseLeave={this.handlePrint}\n\n                                    onFocus={e =>\n                                        onCardInputFocus(e, 'cardDate')\n                                    }\n                                    onBlur={onCardInputBlur}\n                                >\n                                    <option value=\"\" disabled>\n                                        Month\n                                    </option>\n\n                                    {monthsArr.map((val, index) => (\n                                        <option key={index} value={val}>\n\n                                            {val}\n                                            \n                                        </option>\n                                    ))}\n                                </select>\n                                <select\n                                    name=\"cardYear\"\n                                    onMouseLeave={this.handlePrint}\n                                    className=\"card-input__input -select\"\n                                    value={cardYear}\n                                    onChange={this.handleFormChange}\n                                    onFocus={e =>\n                                        onCardInputFocus(e, 'cardDate')\n                                    }\n                                    onBlur={onCardInputBlur}\n                                >\n                                    <option value=\"\" disabled    >\n                                        Year\n                                    </option>\n\n                                    {yearsArr.map((val, index) => (\n                                        <option key={index} value={val}\n                                        \n                                        >\n                                        \n                                          {val}\n\n                                        </option>\n                                    ))}\n                                </select>\n                                {!this.state.datevalitity ?  \n                        <span style={{color: \"red\" , fontWeight: \"bold\"}}>{this.state.message2}</span> \n                        : ''}\n                            </div>\n                        </div>\n                        <div className=\"card-form__col -cvv\">\n                            <div className=\"card-input\">\n                                <label\n                                    htmlFor=\"cardCvv\"\n                                    className=\"card-input__label\"\n                                >\n                                    CVV\n                                </label>\n                           \n                                <input\n                                  id=\"cvv\"\n                                  onMouseUp={this.chaeckcvv}\n                                  onMouseLeave={this.chaeckcvv}\n                                  onMouseDown={this.chaeckcvv}\n                                    type=\"tel\"\n                                    className=\"card-input__input\"\n                                    required\n                                    maxLength=\"3\"\n                                    autoComplete=\"off\"\n                                    name=\"cardCvv\"\n                                    onChange={this.handleFormChange}\n                                    onFocus={this.onCvvFocus}\n                                    onBlur={this.onCvvBlur}\n                                    ref={cardCvvRef}\n                                />\n                                           {!this.state.iscriditcvvnumber ?  \n                        <span style={{color: \"red\" , fontWeight: \"bold\"}}>{this.state.cardCvverr}</span> \n                        : ''}\n \n\n                            </div>\n                        </div>\n                    </div>\n                    </div>\n                    <div className=\"card-header\" id=\"lo\">\n\n{/* <input type=\"radio\" className=\"u\"\n      src={process.env.PUBLIC_URL + '/circlr.png'}\n                                      alt=\"\"\n                                      onClick={()=>{ */}\n\n<input \n\n\n\nid=\"inputy\" type=\"radio\"  name=\"exampleRadios\" className=\"radio\" id=\"exampleRadios2\" value=\"option2\" defaultChecked \n  \n                                      alt=\"\"\n                                      onClick={()=>{\n                                        this.setState({isallvalid: true});\nthis.setState({ showMyComponent: false });\nthis.updateMainState('showMyComponent', false);\nthis.setState({ showMyComponentcridit: true });\nthis.updateMainState('showMyComponentcridit', true);\nthis.setState({ cardNumber: '' });\n\n\n                                        this.updateMainState('isCardFlipped', true);\n                                    }}\n                                   /> \n  <label class=\"form-check-label\" for=\"exampleRadios2\">\n  QiCard                     \n  </label>\n\n        <text>\n                                   {/* QiCard */}\n                                   </text>\n\n                          <div className=\"imgsy\">\n                          <img className=\"u2y\"\nsrc={process.env.PUBLIC_URL + '/qic.jpg'}\n                                      alt=\"\"\n                                   /> \n                              </div>         \n\n                           \n\n  \n  </div>\n\n\n  <div id=\"Qicard\" style={this.state.showMyComponentcridit ? {} : { display: 'none' }} >\n\n                   \n  \n  <div className=\"card-input\">\n                        <label\n                            htmlFor=\"cardNumber\"\n                            className=\"card-input__label\"\n                        >\n                            Card Number\n                        </label>\n                       \n\n        \n                  \n                        <input\n                 id=\"cardnumber\"\n                 onMouseUp={this.checkCardNumber2}\n                 onMouseDown={this.checkCardNumber2}\n                 onMouseLeave={this.checkCardNumber2}\n\n                            type=\"tel\"\n                            name=\"cardNumber\"\n                            className=\"card-input__input\"\n                            autoComplete=\"off\"\n                            onChange={this.onCardNumberChange\n                              \n                            }\n                        onInput={this.handleChange.bind(this, \"cardNumber\")}\n                            \n                            maxLength=\"19\"\n                            ref={cardNumberRef}\n                            \n                            onFocus={e => onCardInputFocus(e, 'cardNumber')}\n                            onBlur={onCardInputBlur}\n                            value={this.state.cardNumber}\n                        />\n                                              {!this.state.isqivalidcardnumber ?  \n                        <span style={{color: \"red\" , fontWeight: \"bold\"}}>{this.state.cardNumbererr2}</span> \n                        : ''}\n                        \n                   </div>\n                  \n                        <form onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n          <div className=\"row\">\n            <div className=\"col-25\">\n                \n            </div>\n           \n          </div>\n       \n          \n          <div className=\"row\">\n\n           \n          </div>\n\n      </form>\n\n\n\n                        <div className=\"card-form__col -cvv\">\n                            <div className=\"card-input\">\n                                <label\n                                    htmlFor=\"cardCvv\"\n                                    className=\"card-input__label\"\n                                >\n                                    PIN\n                                </label>\n                           \n                                <input\n                                  id=\"cvv\"\n                                  onMouseUp={this.chaeckcvvqi}\n                                  onMouseLeave={this.chaeckcvvqi}\n\n                                  onMouseDown={this.chaeckcvvqi}\n                                    type=\"tel\"\n                                    className=\"card-input__input\"\n                                    maxLength=\"4\"\n                                    autoComplete=\"off\"\n                                    name=\"cardCvv\"\n                                    onChange={this.handleFormChange}\n                                    onFocus={this.onCvvFocus}\n                                    onBlur={this.onCvvBlur}\n                                    ref={cardCvvRef}\n                                />\n                                                             {!this.state.isqivalidcvvnumber ?  \n                        <span style={{color: \"red\" , fontWeight: \"bold\"}}>{this.state.cardCvverrqi}</span> \n                        : ''}\n\n                            </div>\n                        </div>\n                   \n                    </div>\n                    <button type=\"submit\" className=\"btn btn-outline-warning paybtn\"\n            \n            disabled={this.state.disabled}\n            onClick={\n                \n                \n             \n            this.checkvalid}\n            \n            \n            >{this.state.disabled ? 'Sending...' : 'Pay Now!'}</button>\n                </div>\n    \n            </div>\n          \n\n            </form>\n        );\n\n\n        \n    }\n}\n\nexport default CForm;\n","import React, { Component } from 'react';\nimport {\n    CSSTransition,\n    TransitionGroup,\n    SwitchTransition\n} from 'react-transition-group';\nimport './styles.scss';\n\nconst CARDS = {\n    visa: '^4',\n    // amex: '^(34|37)',\n    mastercard: '^5[1-5]',\n    imarcan : '^3[1-5]',\n    qi: '633',\n    diners :'^300'\n    // discover: '^6011',\n    // unionpay: '^62',\n    // troy: '^9792',\n};\n\nclass Card extends Component {\n    constructor() {\n        super();\n\n        const backgroundImgname = this.cardBackgroundName();\n        this.state = {\n            style: {},\n            counter: 0,\n            backgroundImgname: backgroundImgname\n        };\n    }\n\n    cardType = () => {\n        const number = this.props.cardNumber;\n        let re;\n        for (const [card, pattern] of Object.entries(CARDS)) {\n            re = new RegExp(pattern);\n            if (number.match(re) != null) {\n                return card;\n            }\n        }\n\n        return 'discover'; // default type\n    };\n\n    cardBackgroundName = () => {\n        let random = Math.floor(Math.random() * 25 + 1);\n        return `${random}.jpeg`;\n    };\n\n    removeEmptySpaces = cardNumber => {\n        return cardNumber.replace(/\\s+/g, '');\n    };\n\n    shouldMaskNumber = (cardNumber, index) => {\n        if (cardNumber.length === 15) {\n            return index > 4 && index < 12;\n        } else {\n            return index > 4 && index < 13;\n        }\n    };\n\n    outlineElementStyle = element => element\n        ? {\n            width: `${element.offsetWidth}px`,\n            height: `${element.offsetHeight}px`,\n            transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\n        }\n        : null;\n\n    componentDidUpdate(prevProps) {\n        const { currentFocusedElm } = this.props;\n        if (\n            currentFocusedElm &&\n            currentFocusedElm !== prevProps.currentFocusedElm\n        ) {\n            const style = this.outlineElementStyle(currentFocusedElm);\n            this.setState({ style });\n        }\n    }\n\n    maskCardNumber(cardNumber) {\n        let cardNumberArr = cardNumber.split('');\n        cardNumberArr.forEach((val, index) => {\n            if (index > 4 && index < 14) {\n                if (cardNumberArr[index] !== ' ') {\n                    cardNumberArr[index] = '*';\n                }\n            }\n        });\n\n        return cardNumberArr;\n    }\n\n    render() {\n        let {\n            cardHolder,\n            cardNumber,\n            cardMonth,\n            cardYear,\n            cardCvv,\n            isCardFlipped,\n            currentFocusedElm,\n            onCardElementClick,\n            cardNumberRef,\n            cardHolderRef,\n            cardDateRef\n        } = this.props;\n\n        const cardHolderArr = cardHolder.split('');\n        const cardNumberArr = this.maskCardNumber(cardNumber);\n        cardCvv = cardCvv.split('');\n\n        return (\n            \n            <div className={'card-item ' + (isCardFlipped ? '-active' : '')}>\n                <div className=\"card-item__side -front\">\n                    <div\n                        className={`card-item__focus ${\n                            currentFocusedElm ? `-active` : ``\n                        }`}\n                        style={this.state.style}\n                    />\n                    <div className=\"card-item__cover\">\n                        <img\n                            alt=\"\"\n                            src={\n                                process.env.PUBLIC_URL +\n                                `/card-background/${this.state.backgroundImgname}`\n                            }\n                            className=\"card-item__bg\"\n                        />\n                    </div>\n\n                    <div className=\"card-item__wrapper\">\n                        <div className=\"card-item__top\">\n                            <img\n                                src={process.env.PUBLIC_URL + '/chip.png'}\n                                alt=\"\"\n                                className=\"card-item__chip\"\n                            />\n                            <div className=\"card-item__type\">\n                                <img\n                                    alt={this.cardType()}\n                                    src={\n                                        process.env.PUBLIC_URL +\n                                        `/card-type/${this.cardType()}.png`\n                                    }\n                                    className=\"card-item__typeImg\"\n                                />\n                            </div>\n                        </div>\n\n                        <label\n                            className=\"card-item__number\"\n                            ref={cardNumberRef}\n                            onClick={() => onCardElementClick('cardNumber')}\n                        >\n                            <TransitionGroup\n                                className=\"slide-fade-up\"\n                                component=\"div\"\n                            >\n                                {cardNumber ? (\n                                    cardNumberArr.map((val, index) => (\n                                        <CSSTransition\n                                            classNames=\"slide-fade-up\"\n                                            timeout={250}\n                                            key={index}\n                                        >\n                                            <div className=\"card-item__numberItem\">\n                                                {val}\n                                            </div>\n                                        </CSSTransition>\n                                    ))\n                                ) : (\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                    >\n                                        <div className=\"card-item__numberItem\">\n                                            #\n                                        </div>\n                                    </CSSTransition>\n                                )}\n                            </TransitionGroup>\n                        </label>\n                        <div className=\"card-item__content\">\n                            <label\n                                className=\"card-item__info\"\n                                onClick={() => onCardElementClick('cardHolder')}\n                                ref={cardHolderRef}\n                            >\n                                <div className=\"card-item__holder\">\n                                    Card Holder\n                                </div>\n                                <div className=\"card-item__name\">\n                                    <TransitionGroup\n                                        className=\"slide-fade-up\"\n                                        component=\"div\"\n                                    >\n                                        {cardHolder === 'FULL NAME' ? (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                            >\n                                                <div>FULL NAME</div>\n                                            </CSSTransition>\n                                        ) : (\n                                            cardHolderArr.map((val, index) => (\n                                                <CSSTransition\n                                                    timeout={250}\n                                                    classNames=\"slide-fade-right\"\n                                                    key={index}\n                                                >\n                                                    <span className=\"card-item__nameItem\">\n                                                        {val}\n                                                    </span>\n                                                </CSSTransition>\n                                            ))\n                                        )}\n                                    </TransitionGroup>\n                                </div>\n                            </label>\n                            <div\n                                className=\"card-item__date\"\n                                onClick={() => onCardElementClick('cardDate')}\n                                ref={cardDateRef}\n                            >\n                                <label className=\"card-item__dateTitle\">\n                                    Expires\n                                </label>\n                                <label className=\"card-item__dateItem\">\n                                    <SwitchTransition in-out>\n                                        {!cardMonth ? (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardMonth}\n                                            >\n                                                <span>MM</span>\n                                            </CSSTransition>\n                                        ) : (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardMonth}\n                                            >\n                                                <span>{cardMonth}</span>\n                                            </CSSTransition>\n                                        )}\n                                    </SwitchTransition>\n                                </label>\n                                /\n                                <label\n                                    htmlFor=\"cardYear\"\n                                    className=\"card-item__dateItem\"\n                                >\n                                    <SwitchTransition out-in>\n                                        {!cardYear ? (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardYear}\n                                            >\n                                                <span>YY</span>\n                                            </CSSTransition>\n                                        ) : (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardYear}\n                                            >\n                                                <span>\n                                                    {cardYear\n                                                        .toString()\n                                                        .substr(-2)}\n                                                </span>\n                                            </CSSTransition>\n                                        )}\n                                    </SwitchTransition>\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card-item__side -back\">\n                    <div className=\"card-item__cover\">\n                        <img\n                            alt=\"\"\n                            src={\n                                process.env.PUBLIC_URL +\n                                `/card-background/${this.state.backgroundImgname}`\n                            }\n                            className=\"card-item__bg\"\n                        />\n                    </div>\n                    <div className=\"card-item__band\"/>\n                    <div className=\"card-item__cvv\">\n                        <div className=\"card-item__cvvTitle\">CVV</div>\n                        <div className=\"card-item__cvvBand\">\n                            {cardCvv.map((val, index) => (\n                                <span key={index}>*</span>\n                            ))}\n                        </div>\n                        <div className=\"card-item__type\">\n                            <img\n                                alt=\"card-type\"\n                                src={\n                                    process.env.PUBLIC_URL +\n                                    `/card-type/${this.cardType()}.png`\n                                }\n                                className=\"card-item__typeImg\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","import React, { useState, useRef } from 'react';\nimport CForm from './components/form';\nimport Card from './components/card';\n\nconst defaultCardNo = '#### #### #### ####';\nconst defaultCardHolderName = 'FULL NAME';\nconst defaultCardMonth = '';\nconst defaultCardYear = '';\nconst defaultCardCvv = '';\n\nconst MainScreen = () => {\n    const initialState = {\n        cardNumber: defaultCardNo,\n        cardHolder: defaultCardHolderName,\n        cardMonth: defaultCardMonth,\n        cardYear: defaultCardYear,\n        cardCvv: defaultCardCvv,\n        isCardFlipped: false,\n        currentFocusedElm: null\n    };\n    const [state, setState] = useState(initialState);\n\n    const updateStateValue = ({ name, value }) => {\n        setState({\n            ...state,\n            [name]: value || initialState[name]\n        });\n    };\n\n    const {\n        cardNumber,\n        cardHolder,\n        cardMonth,\n        cardYear,\n        cardCvv,\n        isCardFlipped\n    } = state;\n    let { currentFocusedElm } = state;\n\n    // References for the Form Inputs\n    let formFieldsRefObj = {\n        cardNumber: useRef(),\n        cardHolder: useRef(),\n        cardDate: useRef(),\n        cardCvv: useRef()\n    };\n\n    let onCardElementClick = key => {\n        focusFormFieldByKey(key);\n    };\n\n    let focusFormFieldByKey = key => {\n        formFieldsRefObj[key].current.focus();\n    };\n\n    // This are the references for the Card DIV elements\n    let cardElementsRef = {\n        cardNumber: null,\n        cardHolder: null,\n        cardDate: null\n    };\n\n    let onCardFormInputFocus = (_event, inputName) => {\n        setState({\n            ...state,\n            currentFocusedElm: cardElementsRef[inputName]\n        });\n    };\n\n    let onCardInputBlur = event => {\n        setState({\n            ...state,\n            currentFocusedElm: null\n        });\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <CForm\n                onUpdateStateValue={updateStateValue}\n                cardNumberRef={formFieldsRefObj.cardNumber}\n                cardHolderRef={formFieldsRefObj.cardHolder}\n                cardDateRef={formFieldsRefObj.cardDate}\n                onCardInputFocus={onCardFormInputFocus}\n                onCardInputBlur={onCardInputBlur}\n            >\n                <Card\n                    cardNumber={cardNumber}\n                    cardHolder={cardHolder}\n                    cardMonth={cardMonth}\n                    cardYear={cardYear}\n                    cardCvv={cardCvv}\n                    isCardFlipped={isCardFlipped}\n                    currentFocusedElm={currentFocusedElm}\n                    onCardElementClick={onCardElementClick}\n                    cardNumberRef={node =>\n                        (cardElementsRef['cardNumber'] = node)\n                    }\n                    cardHolderRef={node =>\n                        (cardElementsRef['cardHolder'] = node)\n                    }\n                    cardDateRef={node => (cardElementsRef['cardDate'] = node)}\n                ></Card>\n            </CForm>\n        </div>\n    );\n};\n\nexport default MainScreen;\n","import React from 'react';\nimport './App.scss';\nimport MainScreen from './screens/MainScreen';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <MainScreen />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}